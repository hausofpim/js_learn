/* 
 string или строка - любой текст в JS, записаный в кавычки.
 `text`, 'Danil', "5" - это все строки. Все три типа кавычек
 правильные. Ниже будут описаны методы, которые позволяют 
 манипулировать строками.
*/

/* Сложение двух строк: */

/* 
 Старый способ сложения строк, не рекомендуется к 
 использованию, так как устарел 
*/
const str1 = "Danil " + "Zhenya";
const concatStrings1 = (str1, str2) => {
  return str1 + str2;
};

/* 
 Более современный способ сложения строк. Вся строка 
 пишется в косых кавычках `` и если внутрь надо добавить
 переменную, то делается это посредством знака доллара 
 и фигурных скобок ${переменная} 
*/
const concatStrings2 = (str1, str2) => {
  return `${str1} и, например ${str2}`;
};
concatStrings2("Первая строка", "вторая"); // Первая строка и, например вторая

/* 
 У каждого символа в строке есть свой индекс. Индекс в строках
 всегда начинается с нуля. То есть, если у нас есть строка "Danil",
 то индексы будут следующими:
 0 1 2 3 4
 D a n i l

 Если нам необходимо, например, получить первую букву слова, то 
 мы можем обратится к ее индексу посредтсвом квадратных скобок:
*/
const myName = "Danil";
const firstLetter = myName[0]; // D
/* 
 Когда мы берем какую-то буквку по индексу, то внутри квадратных
 скобок необязательно писать какое-то определенное число. То есть,
 внутри квадратных скобок может быть какое-то выражение, которое 
 вычисляет индекс нужной нам буквы.
*/

/* 
 Рассмотрим пример с получением последней буквы слова: для того,
 чтобы ее получить, нам нужно знать длину слова. Из длины слова 
 мы вычтем единицу и тем самым получим индекс последней буквы.

 0 1 2 3 4
 D a n i l

 Длина слова - 5. 5 - 1 = 4, то есть 4 это индекс последней буквы.
 Для того, чтобы получить длину слова, мы можем воспользоваться
 параметром, который существует у любой строки - length.
*/
const myNameLength = myName.length; // 5
const lastLetter = myName[myNameLength - 1]; // l
/* 
 Важно заметить, что в myName.length, length - это НЕ функция, 
 а уже готовое циферное значение, то есть нам НЕ нужно вызывать
 myName.length(). 
*/

/* Встроенные фунции строк */

/* 
 Ниже я привел пример самых популярных функций, который уже
 встроены в любую строку в JS.
 Полный список таких функций: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String
*/

let strExp = "Быть или не быть вот в чём вопрос.";

/* 
str.includes(searchStr) - проверяет существует ли в строке заданная 
подстрока и возвращает true или false. Во фронтенд разработке
обычно используется для подсветки пункта меню: если в URL 
есть определенная подстрока, то значит мы находимся на какой-то
определенной странице и следовательно подсвечиваем нужный пункт меню.
*/
console.log(strExp.includes("Быть")); // true
console.log(strExp.includes("вопрос")); // true
console.log(strExp.includes("несуществующий")); // false
console.log(strExp.includes("Быть", 1)); // false
console.log(strExp.includes("БЫТЬ")); // false

/* 
 str.indexOf(searchStr) - находит индекс ПЕРВОГО вхождения переданной
 подстроки в строку. Если ничего не найдено, то возвращает -1.
*/
console.log(strExp.indexOf("Быть")); // 0
console.log(strExp.indexOf("быть")); // 12
console.log(strExp.indexOf("б")); // 12
console.log(strExp.indexOf("и")); // 5
console.log(strExp.indexOf("й")); // -1

/* 
 str.lastIndexOf(searchStr) - находит индекс ПОСЛЕДНЕГО вхождения переданной
 подстроки в строку. Если ничего не найдено, то возвращает -1.
*/
console.log(strExp.lastIndexOf("Быть")); // 0
console.log(strExp.lastIndexOf("быть")); // 12
console.log(strExp.lastIndexOf("ь")); // 15
console.log(strExp.lastIndexOf("и")); // 7
console.log(strExp.lastIndexOf("й")); // -1

/* 
 str.replace(substr, newSubStr) - заменяет подстроку substr из strExp на newSubStr 
 ОДИН раз, при первом вхождении substr в strExp. 

 str.replaceAll(substr, newSubStr) - заменяет все подстроки substr из strExp на 
 newSubStr. 

 В обоих случая исходная строка не меняется!
*/

console.log(strExp.replace("Быть", "Лежать")); // Лежать или не быть вот в чём вопрос.
console.log("быть или не быть вот в чем вопрос".replaceAll("быть", "лежать"));
// лежать или не лежать вот в чём вопрос.

/* 
 str.slice(startIndex, endIndex?) - извлекает часть строки и возвращает 
 новую строку без изменения оригинальной строки. startIndex - индекс символа
 с которого нужно начать вырезать строку, обязательный аргумент. endIndex -
 индекс символа, до которого нужно обрезать строку (не включительно), 
 необязательный аргумент. 
*/

console.log(strExp.slice(27)); //вопрос.
console.log(strExp.slice(0, 4)); // Быть
console.log(strExp.slice(-7)); // вопрос.

/* 
 Весь список методов строк знать необязательно, но те, что выше - самые
 популярные. Советую просто почитать и посмотреть следующие методы: 
 endsWith()
 repeat()
 split()
 startsWith()
 toLowerCase()
 toUpperCase()
 trim()

 вот тут https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String
*/
